1. strategy pattern
- 여러 알고리즘을 하나의 추상적인 접근점(인터페이스)을 만들어 접근점에서 서로 교환 가능하도록 하는 패턴
실습
- 신작 게임에서 캐릭터와 무기를 구현(칼, 검), 추후에 도끼 추가

2. adapter pattern
- 알고리즘을 요구사항에 맞게 사용 가능 
- 변경이 있을 경우 adapter 구현체만 수정하면 됨
실습
- Math클래스(라이브러리)에서 구현된 함수를 float를 사용하도록 지원하는 adapter 클래스를 만들어라
- twoTime 대신 doubled를 사용하도록 변경
- halfOf시 로그를 찍도록 수정

3. template method pattern
- 공통적인 프로세스를 묶어주기
- 알고리즘의 구조를 메서드에 정의하고 하위클래스에서 알고리즘 구조 변경없이 알고리즘을 재정의
- 구현하려는 알고리즘이 일정한 프로세스가 있으며, 변경 가능성이 클때
구현순서
1) 알고리즘을 여러 단계로 나눈다.
2) 나눠진 알고리즘의 단계를 메서드로 선언한다.
3) 알고리즘을 수행할 템플릿 메서드를 만든다.
4) 하위클래스에서 나눠진 메서드들을 구현한다.

실습
- 신작 게임의 접속을 구현
- 보안 -> 인증 -> 권한 -> 접속 순서로 구현하고 각 메서드는 main에서 노출되면 안됨

4. factory method pattern
- 객체의 생성을 한군데서 관리
- 동일한 인터페이스 구현으로 새로운 객체가 추가되더라도 소스의 수정이 없다.
- 제품을 생성하는 부분과 사용하는 부분을 분리 
실습
- 게임 아이템과 아이템 생성을 구현 

5. singleton pattern
- 하나의 인스턴스만 생성하도록 구현









