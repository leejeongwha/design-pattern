1. strategy pattern
1) 특징 : 다양한 객체클라이언트와 다양한 행동 그룹군들, 즉 바뀌는 부분이 캡슐화 되어 유연하게 활용할 수 있음
         클라이언트에서 어떤 객체를 사용할지 지정할 수 있다.
2) 장점 : 구현을 활용해서 유연함
         갭슐화로 기능군 관리가 편함 
         기능, 클라이언트 객체가 변경되어도 다른 부분에 영향이 없음
         실행중에 기능에 대한 변경이 가능
3) 단점 : 객체의 특징 (객체를 생성하는 클래스의 구성)인 상태(state)와 행동(method)을 기능군에서는 상태가 빠지고 기능(행동)만을 구현한거에 대해 객체라는 의미상의 문제가 생길 수 있다.
4) 활용 : 상황에 따라 최적의 알고리즘을 선택해서 사용하도록 할 때

2. adapter pattern
1) 특징 : 인터페이스를 클라이언트가 원하는 인터페이스로 바꿔주는 역할을 한다.
2) 장점 : 소스코드 변경없이 동작이 가능하도록 한다.
         어댑터 클래스에 새로운 기능을 추가해주는 등의 활용이 가능하다.
3) 단점 : 어댑터 클래스의 대부분의 코드를 구현해야 할 경우 효율적이지 못함.
4) 활용 : 기존 클래스를 사용하려고 하는데 인터페이스가 맞지 않을 경우

3. template method pattern
1) 특징 : 일반적인 클래스 상속 구조에서는 하위 클래스의 멤버 함수가 상위 클래스의 멤버 함수를 불러 사용하는 형태인데 반해 Template Method 패턴에서는 상위 클래스의 멤버 함수가 하위 클래스의 멤버 함수를 불러 사용하는 형태이다.
		 클래스 상속 관계를 이용해서 알고리즘의 일부를 변경시키는 방식
2) 장점 : 공통부분만 따로 빼내고 개별적으로 구현이 필요한 부분만 자식 클래스에서 구현하는 방식 가능
         일련의 알고리즘 단계를 캡슐화 함 
3) 단점 : 상속을 통하여 구현이 되므로 해당 추상 메서드가 필요한 클래스마다 상속을 받아야 한다.
4) 활용 : 일련의 알고리즘 단계 정의가 필요할 경우

4. factory method pattern
1) 특징 : 객체를 생성하되 직접 객체 생성자(Constructor)를 호출해서 객체를 생성하는 것이 아니라 대행 함수를 통해 간접적으로 객체를 생성하는 방식을 Factory Method 패턴이라고 한다. 또한 이때 객체 생성을 대행해주는 함수를 Factory Method라고 한다.
2) 장점 : 어떤 객체를 생성할 것인지와는 무관하게 동일한 형태로 프로그래밍이 가능하다. 
         직접 생성자를 호출해서 객체를 생성하는 것보다 훨씬 유연하고 확장성 있는 구조이다.
3) 단점 : 생성할 객체의 종류가 달라질때 마다 새로운 하위 클래스를 정의해야 한다. 이는 불필요하게 많은 클래스를 정의해야 한다는 문제점이 있다.
4) 활용 : 상속 관계에 있는 클래스들의 멤버 함수가 동일한 프로그램 로직을 가지고 있으면서 내부적으로 생성할 객체만 서로 다를 때 Factory Method 패턴을 적용하면 편리하다.

5. singleton pattern
1) 특징 : 하나의 프로그램 내에서 하나의 인스턴스만 사용하고자 할때.
2) 장점 : 시스템 자원을 효율적으로 사용할 수 있다.
3) 단점 : 여기 저기에서 참조되어서 변경되는 경우 문제 발생.
4) 활용 : 스레드풀, 디바이스 드라이버, 로그기록 용

6. prototype pattern
1) 특징 : 이미 생성된 객체를 복제(clone)해서 새로운 객체를 생성하는 방법.
2) 장점 : NEW 생성자를 호출할 경우 생성자 내의 코드를 전부 재 반복해야 하기 때문에 연산이 많아진다. 하지만 메모리를 복사하여 사용할 경우 그 과정을 줄일 수 있게 된다.
3) 단점 : 각 ConcretePrototype 클래스들이 각자 모두 Clone 함수를 구현해야 한다.
		 얕은 복사(Shallow Copy)와 깊은 복사(Deep Copy) 주의 필요.
4) 활용 : 인스턴스 생성이 어려운 경우(인스턴스화할 클래스를 런타임에 지정할 때, 동적 로딩)
	     어떤 클래스의 인스턴스를 만드는 것이 자원/시간을 많이 잡아먹거나 복잡 할 때
	     미리 원형으로 초기화해 두고, 나중에 이를 복제해서 사용하는 것이 매번 필요한 상태 조합의 값들을 수동적으로 초기화하는 것보다 편리 할 수도 있다.
	     
7. builder pattern
1) 특징 : 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴
2) 장점 : Builder 클래스는 Director 클래스에게 객체를 생성할 수 있는 인터페이스를 제공한다. 대신 생성되는 객체의 내부 구조나 표현 방식등은 Builder 클래스 내부로 숨긴다
3) 단점 : Builder 패턴은 새로운 종류의 객체 생성을 추가하기는 쉬우나 객체를 구성하는 각 부분들을 새롭게 추가하기는 어렵다.
         Builder 패턴을 구성하는 모든 클래스들을 수정해야 하는 문제가 발생하기 때문이다.
4) 활용 : 생성자의 매개변수가 많을 경우
